package gae.piaz.performance.rest;

import gae.piaz.performance.domain.Book;
import gae.piaz.performance.domain.dto.BookDTO;
import gae.piaz.performance.repository.BookRepository;
import gae.piaz.performance.service.BookMapper;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.UUID;
import java.util.stream.Collectors;

/**
 * Generated by Springboot-3layer-Generator at Jan 6, 2021, 8:30:41 PM
 */
@RestController
@RequestMapping("/books")
@Slf4j
public class BookController {

    @Autowired
    private BookRepository bookRepository;

    @Autowired
    private BookMapper mapper;

    @GetMapping(produces = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<List<BookDTO>> getAll() {
        UUID uuid = UUID.randomUUID();
        log.info("getAll() {} running", uuid);

        ResponseEntity<List<BookDTO>> list = ResponseEntity.ok(this.bookRepository.findAll().stream().
                map(mapper::toDto).collect(Collectors.toList()));

        log.info("getAll() {} executed", uuid);
        return list;
    }

    @GetMapping(value = "/simple", produces = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<List<Book>> getAllSimple() {
        return ResponseEntity.ok(this.bookRepository.findAll());
    }

    @PostMapping(produces = MediaType.APPLICATION_JSON_VALUE, consumes = MediaType.APPLICATION_JSON_VALUE)
    @Transactional
    public ResponseEntity<BookDTO> saveBook(@RequestBody BookDTO dto) {
        UUID uuid = UUID.randomUUID();
        log.info("saveBook() {} running", uuid);

        Book entity = mapper.toEntity(dto);
        entity = bookRepository.save(entity);
        ResponseEntity<BookDTO> resp = ResponseEntity.ok(mapper.toDto(entity));

        log.info("saveBook() {} ", uuid);
        return resp;
    }

    @PutMapping(produces = MediaType.APPLICATION_JSON_VALUE, consumes = MediaType.APPLICATION_JSON_VALUE)
    @Transactional
    public ResponseEntity<BookDTO> update(@RequestBody BookDTO dto) {
        UUID uuid = UUID.randomUUID();
        log.info("updateBook() {} running", uuid);

        Book book = this.bookRepository.findByIsbn(dto.getIsbn());
        book.setAuthor(dto.getAuthor());
        BookDTO bookDto = mapper.toDto(this.bookRepository.save(book));

        log.info("updateBook() {} executed", uuid);
        return ResponseEntity.ok(bookDto);
    }


}